//Part 1: Basic MongoDB Commands and Queries

//Step 1: Create Collections and Insert Data

db.customers.insertMany([{name:"Adam",email:"adam@example.com",address:{street:"123 Main st",city:"springfield",zipcode:"12345"},phone:"555-1111",registration_date:ISODate("2023-01-01T12:00:00Z")},
{name:"Bob",email:"bob@example.com",address:{street:"456 Oak st",city:"shelbyville",zipcode:"23456",},phone:"555-2222",registration_date:ISODate("2023-02-02T12:00:00Z")},
{name:"Charlie",email:"charlie@example.com",address:{street:"789 Maple st",city:"RiverTown",zipcode:"34567"},phone:"555-3333",registration_date:ISODate("2023-03-03T12:00:00Z")},
{name:"Danny",email:"danny@example.com",address:{street:"135 Elm st",city:"Springfield",zipcode:"45678"},phone:"555-4444",registration_date:ISODate("2023-04-04T12:00:00Z")},
{name:"Eve",email:"eve@example.com",address:{street:"246 Pine st",city:"Shelbyville",zipcode:"56789"},phone:"555-5555",registration_date:ISODate("2023-05-05T12:00:00Z")}]);

//Create Orders Collection and insert data
db.orders.insertMany([{order_id:"ORD123456",customer_id:ObjectId('67386090b57e1de5d20d8190'),order_date:ISODate("2023-05-05T14:00:00Z"),status:"shipped",items:[{product_name:"laptop",quantity:1,price:1500},{product_name:"mouse",quantity:2,price:250}],total_value:2000},
{order_id:"ORD123457",customer_id:ObjectId('67386090b57e1de5d20d8191'),order_date:ISODate("2023-06-06T14:00:00Z"),status:"pending",items:[{product_name:"coffee maker",quantity:1,price:1500}],total_value:1500},
{order_id:"ORD123458",customer_id:ObjectId('67386090b57e1de5d20d8192'),order_date:ISODate("2023-07-07T14:00:00Z"),status:"delivered",items:[{product_name:"Ear buds",quantity:2,price:50}],total_value:50},
{order_id:"ORD123459",customer_id:ObjectId('67386090b57e1de5d20d8193'),order_date:ISODate("2023-08-08T14:00:00Z"),status:"shipped",items:[{product_name:"Smart Tv",quantity:1,price:25000},{product_name:"Tab",quantity:1,price:5000}],total_value:30000}
,{order_id:"ORD123461",customer_id:ObjectId('67386090b57e1de5d20d8194'),order_date:ISODate("2023-09-09T14:00:00Z"),status:"processing",items:[{product_name:"Headphones",quantity:1,price:250}],total_value:250}]);

// Find Orders for a Specific Customer

db.orders.find({customer_id:ObjectId('67386090b57e1de5d20d8190');

// Find a specific customer by ID
db.customers.findOne({ _id: ObjectId('67386090b57e1de5d20d8190') });

// Update an order status
db.orders.updateOne({order_id:"ORD123456"},{$set:{status:"delivered"}});

// Delete an order by order code
db.orders.deleteOne({order_id:"ORD123456"});

// Part 2: Aggregation Pipeline

// Calculate Total Value of All Orders by Customer
db.orders.aggregate([
  { $group: { _id: "$customer_id", totalSpent: { $sum: "$total_value" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customerDetails" } },
  { $unwind: "$customerDetails" },
  { $project: { customerName: "$customerDetails.name", totalSpent: 1 } }
]);

//Group Orders by Status
db.orders.aggregate([
  { $group: { _id: "$status", count: { $sum: 1 } } }
]);

//List Customers with Their Recent Orders
db.orders.aggregate([
  { $sort: { order_date: -1 } },
  { $group: { _id: "$customer_id", latestOrder: { $first: "$$ROOT" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customerDetails" } },
  { $unwind: "$customerDetails" },
  { $project: { customerName: "$customerDetails.name", email: "$customerDetails.email", order: "$latestOrder" } }
]);

// Find the Most Expensive Order by Customer
db.orders.aggregate([
  { $sort: { total_value: -1 } },
  { $group: { _id: "$customer_id", mostExpensiveOrder: { $first: "$$ROOT" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customerDetails" } },
  { $unwind: "$customerDetails" },
  { $project: { customerName: "$customerDetails.name", mostExpensiveOrder: "$mostExpensiveOrder" } }
]);

//Real-World Scenario with Relationships

// All Customers Who Placed Orders in the Last Month:
db.orders.aggregate([
    { $match: { placed_on: { $gte: ISODate(new Date(new Date().setDate(new Date().getDate() - 30)).toISOString()) } } },
    { $group: { _id: "$client_id", recent_order: { $first: "$$ROOT" } } },
    { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "client_info" } },
    { $unwind: "$client_info" },
    { $project: { name: "$client_info.name", email: "$client_info.email", order_date: "$recent_order.placed_on" } }
]);

//Find All Products Ordered by a Specific Customer
const customer = db.customers.findOne({ name: "Adam" });
db.orders.aggregate([
  { $match: { customer_id: customer._id } },
  { $unwind: "$items" },
  { $group: { _id: "$items.product_name", totalQuantity: { $sum: "$items.quantity" } } }
]);



//Find the Top 3 Customers with the Most Expensive Total Orders
db.orders.aggregate([
  { $group: { _id: "$customer_id", totalSpent: { $sum: "$total_value" } } },
  { $sort: { totalSpent: -1 } },
  { $limit: 3 },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customerDetails" } },
  { $unwind: "$customerDetails" },
  { $project: { customerName: "$customerDetails.name", totalSpent: 1 } }
]);


//Add a New Order for an Existing Customer
const customer = db.customers.findOne({ name: "Eve" });
db.orders.insertOne({order_id:"ORD123462",customer_id:ObjectId('67386090b57e1de5d20d8190'),order_date:ISODate("2023-10-10T14:00:00Z"),status:"pending",items:[{product_name:"smartphone",quantity:1,price:1000},{product_name:"Headphones",quantity:1,price:100}],total_value:1100});


//Part 4: Bonus Challenge

//Find Customers Who Have Not Placed Orders
db.customers.aggregate([
  { $lookup: { from: "orders", localField: "_id", foreignField: "customer_id", as: "orders" } },
  { $match: { orders: { $size: 0 } } },
  { $project: { name: 1, email: 1 } }
]);

//Calculate the Average Number of Items Ordered per Order
db.orders.aggregate([
  { $unwind: "$items" },
  { $group: { _id: "$_id", itemCount: { $sum: "$items.quantity" } } },
  { $group: { _id: null, avgItemsPerOrder: { $avg: "$itemCount" } } }
]);

//Join Customer and Order Data Using $lookup
db.customers.aggregate([
  { $lookup: { from: "orders", localField: "_id", foreignField: "customer_id", as: "orders" } },
  { $unwind: "$orders" },
  { $project: { name: 1, email: 1, order_id: "$orders.order_id", total_value: "$orders.total_value", order_date: "$orders.order_date" } }
]);


















